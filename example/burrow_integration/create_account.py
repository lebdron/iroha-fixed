import os
import binascii
from iroha import IrohaCrypto
from iroha import Iroha, IrohaGrpc
from iroha.primitive_pb2 import can_set_my_account_detail
import sys

if sys.version_info[0] < 3:
    raise Exception('Python 3 or a more recent version is required.')

# Here is the information about the environment and admin account information:
IROHA_HOST_ADDR = os.getenv('IROHA_HOST_ADDR', '127.0.0.1')
IROHA_PORT = os.getenv('IROHA_PORT', '50051')
ADMIN_ACCOUNT_ID = os.getenv('ADMIN_ACCOUNT_ID', 'admin@test')
ADMIN_PRIVATE_KEY = os.getenv(
    'ADMIN_PRIVATE_KEY', 'f101537e319568c765b2cc89698325604991dca57b9716b58016b253506cab70')

iroha = Iroha(ADMIN_ACCOUNT_ID)
net = IrohaGrpc('{}:{}'.format(IROHA_HOST_ADDR, IROHA_PORT))
user_private_key = IrohaCrypto.private_key()
user_public_key = IrohaCrypto.derive_public_key(user_private_key)

def trace(func):
    """
    A decorator for tracing methods' begin/end execution points
    """

    def tracer(*args, **kwargs):
        name = func.__name__
        print('\tEntering "{}"'.format(name))
        result = func(*args, **kwargs)
        print('\tLeaving "{}"'.format(name))
        return result

    return tracer

@trace
def create_contract() :
    bytecode = ("608060405234801561001057600080fd5b5073a6abc17819738299b3b2c1ce46d55c74f04e290c6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610761806100746000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bc53c0c41461003b578063d4e804ab1461006b575b600080fd5b610055600480360381019061005091906102df565b610089565b60405161006291906104c5565b60405180910390f35b610073610253565b60405161008091906104aa565b60405180910390f35b606060008484846040516024016100a2939291906104e7565b6040516020818303038152906040527fbc53c0c4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051610169919061047c565b600060405180830381855af49150503d80600081146101a4576040519150601f19603f3d011682016040523d82523d6000602084013e6101a9565b606091505b5091509150816101ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e590610533565b60405180910390fd5b856040516101fc9190610493565b6040518091039020876040516102129190610493565b60405180910390207fb4086b7a9e5eac405225b6c630a4147f0a8dcb4af3583733b10db7b91ad21ffd60405160405180910390a38093505050509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061028a61028584610578565b610553565b9050828152602081018484840111156102a257600080fd5b6102ad848285610629565b509392505050565b600082601f8301126102c657600080fd5b81356102d6848260208601610277565b91505092915050565b6000806000606084860312156102f457600080fd5b600084013567ffffffffffffffff81111561030e57600080fd5b61031a868287016102b5565b935050602084013567ffffffffffffffff81111561033757600080fd5b610343868287016102b5565b925050604084013567ffffffffffffffff81111561036057600080fd5b61036c868287016102b5565b9150509250925092565b61037f816105f7565b82525050565b6000610390826105a9565b61039a81856105bf565b93506103aa818560208601610638565b6103b3816106cb565b840191505092915050565b60006103c9826105a9565b6103d381856105d0565b93506103e3818560208601610638565b80840191505092915050565b60006103fa826105b4565b61040481856105db565b9350610414818560208601610638565b61041d816106cb565b840191505092915050565b6000610433826105b4565b61043d81856105ec565b935061044d818560208601610638565b80840191505092915050565b60006104666027836105db565b9150610471826106dc565b604082019050919050565b600061048882846103be565b915081905092915050565b600061049f8284610428565b915081905092915050565b60006020820190506104bf6000830184610376565b92915050565b600060208201905081810360008301526104df8184610385565b905092915050565b6000606082019050818103600083015261050181866103ef565b9050818103602083015261051581856103ef565b9050818103604083015261052981846103ef565b9050949350505050565b6000602082019050818103600083015261054c81610459565b9050919050565b600061055d61056e565b9050610569828261066b565b919050565b6000604051905090565b600067ffffffffffffffff8211156105935761059261069c565b5b61059c826106cb565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061060282610609565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561065657808201518184015260208101905061063b565b83811115610665576000848401525b50505050565b610674826106cb565b810181811067ffffffffffffffff821117156106935761069261069c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4572726f722063616c6c696e67207365727669636520636f6e7472616374206660008201527f756e6374696f6e0000000000000000000000000000000000000000000000000060208201525056fea26469706673582212208cf9fbb06613b43a6f67c0ecc80798166ca07dc978db83f517b5007a381b59a064736f6c63430008040033")
    # bytecode was generated using remix editor  https://remix.ethereum.org/
    tx = iroha.transaction([
        iroha.command('CallEngine', caller='admin@test', input=bytecode)
    ])
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    net.send_tx(tx)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx))
    print(hex_hash)
    for status in net.tx_status_stream(tx):
        print(status)
    return hex_hash
        
def get_eng_rec(hash):
    query = iroha.query('GetEngineReceipts', tx_hash=hash)
    IrohaCrypto.sign_query(query, ADMIN_PRIVATE_KEY)

    response = net.send_query(query)
    print(response)
    contract_add = response.engine_receipts_response.engine_receipts [0].contract_address
    print (contract_add)
    return contract_add

@trace
def account(address) :
    params = ("bc53c0c4"   # the first 4 bytes of the keccak256 hash of the function signature:‘queryBalance(string,string)’
            "0000000000000000000000000000000000000000000000000000000000000060" # the location of the data part of the first parameter
            "00000000000000000000000000000000000000000000000000000000000000a0" # the location of the data part of the second parameter
            "00000000000000000000000000000000000000000000000000000000000000e0" # the location of the data part of the third parameter
            "0000000000000000000000000000000000000000000000000000000000000005" # count for "test"
            "7465737474000000000000000000000000000000000000000000000000000000" # encoding of "test"
            "0000000000000000000000000000000000000000000000000000000000000006" # count for "domain"
            "646F6D61696E0000000000000000000000000000000000000000000000000000" # encoding of "domain"
            "0000000000000000000000000000000000000000000000000000000000000040" # count of "key"
            "31323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334" # encoding of "key"
         )
    tx = iroha.transaction([
        iroha.command('CallEngine', caller='admin@test', callee=address, input=params)
    ])
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    response=net.send_tx(tx)
    print(response)
    for status in net.tx_status_stream(tx):
        print(status)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx))
    print(hex_hash)
    
hash =create_contract()
address=get_eng_rec(hash)
account(address)
print('done')